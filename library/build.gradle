apply plugin: 'com.android.library'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 22
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
//    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile 'com.loopj.android:android-async-http:1.4.9'
}


//task deleteJar(type: Delete) {
//    delete 'release/PuristitSDK.jar'
//}
//
//task exportJar(type: Copy){
//    from('build/intermediates/bundles/release/')
//    into('release/')
//    include('classes.jar')
//    rename('classes.jar', 'PuristitSDK.jar')
//}
//
//exportJar.dependsOn(deleteJar, build)


android.libraryVariants.all {
    variant ->
        def name = variant.buildType.name

        if (name.equals(com.android.builder.core.BuilderConstants.DEBUG)) {
            return; // Skip debug builds.
        }
        def task = project.tasks.create "createJar${name.capitalize()}", Jar
        task.dependsOn variant.javaCompile
//Include Java classes
        task.from variant.javaCompile.destinationDir
//Include dependent jars with some exceptions
        task.from configurations.compile.findAll {
           it.getName() != 'android.jar' && !it.getName().startsWith('junit') && !it.getName().startsWith('hamcrest')
        }.collect {
            it.isDirectory() ? it : zipTree(it)
        }
        artifacts.add('archives', task);

}

task copyJar(type: Copy){
    from('build/libs/')
    into('release/')
    include('library.jar')
    rename('library.jar', 'PuristitSDK.jar')

}
