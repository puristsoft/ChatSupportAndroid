apply plugin: 'com.android.library'

android {
    compileSdkVersion 25
    buildToolsVersion '26.0.2'

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 22
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
//    compile fileTree(dir: 'libs', include: ['*.jar'])

//    compile files('libs/gson-2.4.jar')
    compile files('libs/universal-image-loader-1.9.5.jar')
    compile 'com.google.code.gson:gson:2.8.2'
    compile 'com.loopj.android:android-async-http:1.4.9'
    compile "org.java-websocket:Java-WebSocket:1.3.7"

    compile 'com.android.support:appcompat-v7:25.2.0'

    compile "com.android.support:recyclerview-v7:25.2.0"
    compile "com.android.support:cardview-v7:25.2.0"
}


//task deleteJar(type: Delete) {
//    delete 'release/PuristitSDK.jar'
//}
//
//task exportJar(type: Copy){
//    from('build/intermediates/bundles/release/')
//    into('release/')
//    include('classes.jar')
//    rename('classes.jar', 'PuristitSDK.jar')
//}
//
//exportJar.dependsOn(deleteJar, build)


android.libraryVariants.all {
    variant ->
        def name = variant.buildType.name

        if (name.equals(com.android.builder.core.BuilderConstants.DEBUG)) {
            return; // Skip debug builds.
        }
        def task = project.tasks.create "createJar${name.capitalize()}", Jar
        task.dependsOn variant.javaCompile
//Include Java classes
        task.from variant.javaCompile.destinationDir
//Include dependent jars with some exceptions
        task.from configurations.compile.findAll {
           it.getName() != 'android.jar' && !it.getName().startsWith('junit') && !it.getName().startsWith('hamcrest')
        }.collect {
            it.isDirectory() ? it : zipTree(it)
        }
        artifacts.add('archives', task);

}



// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
artifacts {
    archives sourcesJar
}

// Build a jar file in addition to the default aar file
android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    def task = project.tasks.create "jar${name.capitalize()}", Jar
    task.dependsOn variant.javaCompile
    task.from variant.javaCompile.destinationDir
    artifacts.add('archives', task);
}

task copyJar(type: Copy){
    from('build/libs/')
    into('release/')
    include('library.jar')
    rename('library.jar', 'PuristitSDK_new.jar')

}
